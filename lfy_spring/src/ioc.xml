<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">



    <!--实验1：注册一个Person对象，Spring会自动创建这个Person对象-->
    <!--
        一个Bean标签可以注册一个组件（对象，类）
        class,写要注册的全类名
        id,这个对象的唯一标识
    -->
    <bean id="person01" class="com.mmz.Person">
        <!--使用property标签为Person对象赋值-->
        <property name="lastName" value="张三"></property>
        <property name="age" value="18"></property>
        <property name="email" value="zhangsan@163.com"></property>
        <property name="gender" value="男"></property>

    </bean>

    <bean id="person02" class="com.mmz.Person">
        <!--使用property标签为Person对象赋值-->
        <property name="lastName" value="张三丰"></property>
        <property name="age" value="180"></property>
        <property name="email" value="zhangsanfeng@163.com"></property>
        <property name="gender" value="仙"></property>

    </bean>

    <bean id="person03" class="com.mmz.Person">
    <!--调用有参构造器为Person对象赋值-->
    <constructor-arg name="lastName" value="zhaomin"></constructor-arg>
    <constructor-arg name="age" value="28"></constructor-arg>
    <constructor-arg name="email" value="zhaomin@163.com"></constructor-arg>
    <constructor-arg name="gender" value="女"></constructor-arg>

    </bean>


    <!--可以省略name属性，但是严格按照构造器参数的位置-->
    <!--如果重载可以使用Type指定参数的类型-->
    <bean id="person04" class="com.mmz.Person">
        <!--调用有参构造器为Person对象赋值-->
        <constructor-arg value="zhangwuji"></constructor-arg>
        <constructor-arg value="29"></constructor-arg>
        <constructor-arg value="zhangwuji@163.com"></constructor-arg>
        <constructor-arg value="男"></constructor-arg>

    </bean>

    <!--通过p名称空间为bean赋值,名称空间是防止标签重复-->
    <bean id="person05" class="com.mmz.Person"
          p:lastName="gumin"
          p:age="26"
          p:email="gumin@163.com"
          p:gender="女">
    </bean>


    <!--实验4：为各种不同类型的配置文件赋值：
        测试赋值null值、
        引用类型赋值（引用其他的Bean，引用内部的Bean）、
        集合类型赋值（List/Map/Properties）、
        util名称空间创建集合类型的bean
        级联属性赋值
        -->

    <!--赋值null值-->
    <bean id="person06" class="com.mmz.Person">
        <!--lastName = "null"-->
        <!--
        <property name="lastName" value="null"></property>
        -->
        <!--进行复杂的赋值-->
        <property name="lastName">
            <null></null>
        </property>
    </bean>

    <!--引用赋值-->
    <bean id="car01" class="com.mmz.Car" p:price="2000000" p:name="BMW" p:color="red">
    </bean>

    <bean id="person07" class="com.mmz.Person">
        <property name="car" ref="car01"></property>
    </bean>

    <!--引用内部Bean，其中内部Bean的ID没有作用，不能被获取到-->
    <bean id="person08" class="com.mmz.Person">
        <property name="car">
            <bean id="car02" class="com.mmz.Car">
                <property name="name" value="Auto"></property>
                <property name="color" value="yellow"></property>
                <property name="price" value="3500"></property>
            </bean>
        </property>
    </bean>

    <bean id="book01" class="com.mmz.Book">
        <property name="author" value="Hanmnwell"></property>
        <property name="bookName" value="Oldman and Sea"></property>
    </bean>

    <!--为list类型赋值,使用list标签-->
    <bean id="person09" class="com.mmz.Person">
        <property name="books">
            <!--list 标签类似于 list = new ArrayList()-->
            <list>
                <!--list的标签体中添加每一个元素-->
                <bean id="book02" class="com.mmz.Book" p:author="Andy" p:bookName="Great Times">
                </bean>

                <ref bean="book01"></ref>
            </list>
        </property>
    </bean>

    <!--为map类型赋值,使用map标签-->
    <bean id="person10" class="com.mmz.Person">
        <property name="maps">
            <!--map 标签类似于 map = new LinkedHashMap()-->
            <map>
                <entry key="k1" value="v1"></entry>
                <entry key="k2" value="18"></entry>
                <entry key="k3" value-ref="book01"></entry>
                <entry key="k4">
                    <bean id="book03" class="com.mmz.Book" p:author="Cook" p:bookName="Time and Dinner">
                    </bean>
                </entry>
            </map>
        </property>

    </bean>

    <!--为properties类型赋值,使用props标签-->
    <bean id="person11" class="com.mmz.Person">
        <property name="properties">
            <props>
                <prop key="username">root</prop>
                <prop key="password">1234455</prop>
            </props>
        </property>
    </bean>

    <!--util名称空间创建集合类型的bean:方便别人引用-->
    <bean id="person12" class="com.mmz.Person">
        <property name="maps" ref="myMap"></property>
    </bean>
    <util:map id="myMap">
        <entry key="k1" value="v1"></entry>
        <entry key="k2" value="18"></entry>
        <entry key="k3" value-ref="book01"></entry>
        <entry key="k4">
            <bean id="book03" class="com.mmz.Book" p:author="Cook" p:bookName="Time and Dinner">
            </bean>
        </entry>

    </util:map>

    <!--级联属性赋值:属性的属性,因为是引用所以原来的值也会被修改-->
    <bean id="person13" class="com.mmz.Person">
        <!--为Car赋值的时候，改变Car的价格-->
        <property name="car" ref="car01"></property>
        <!---->
        <property name="car.price" value="900000"></property>
    </bean>








    <!--
    实验5：通过继承实现bean配置信息的重用
    实验6：通过abstract属性创建一个模板bean
    实验7：bean之间的依赖

    -->

    <!--实验5：通过继承实现bean配置信息的重用-->
    <!--实验6：abstract="true" 这个Bean配置是一个抽象的，不能获取它的实例，只能被别人用来继承-->
    <bean id="person14" class="com.mmz.Person" abstract="true">
        <property name="lastName" value="翠花"></property>
        <property name="age" value="18"></property>
        <property name="email" value="cuihua@163.com"></property>
        <property name="gender" value="小仙女"></property>

    </bean>

    <!--parent:指定当前bean的配置信息继承于哪一个-->
    <bean id="person15" class="com.mmz.Person" parent="person14">
        <property name="lastName" value="如花"></property>
    </bean>



    <!--实验7：bean之间的依赖,原本是按照创建的顺序配置Bean的顺序-->
    <!--可以改变其创建的顺序，depends-on后面跟bean-->
    <bean id="person" class="com.mmz.Person" depends-on="car"></bean>
    <bean id="car" class="com.mmz.Car"></bean>
    <bean id="book" class="com.mmz.Book"></bean>



    <!--非常重要的实验：

        实验8：测试bean的作用域，分别创建单实例和多实例的bean
        实验9：配置通过静态工厂创建的bean，实例工厂方法创建的bean，FactoryBean

    -->
    <!--实验8：测试bean的作用域，分别创建单实例和多实例的bean
            bean的作用域：指定bean是否为单实例，默认是单实例
            scope="prototype" 是多实例 容器启动之前不会创建对象，每次获取的时候才会创建新的实例
            scope="singleton" 是单实例（默认）在容器启动之前就已经创建好了对象
            -->

    <bean id="bookPrototype" class="com.mmz.Book" scope="prototype"></bean>


    <!--实验9：配置通过静态工厂创建的bean，实例工厂方法创建的bean，FactoryBean-->
    <!--默认框架利用反射new出来bean的实例-->
    <!--工厂模式：不需要知道细节，工厂帮我们创建，有一个专门帮我们创建对象的类就是工厂-->
    <!--静态工厂：工厂本身不需要创建对象,通过静态方法调用，对象 = 工厂类.工厂方法名()-->
    <!--实例工厂：工厂本身需要创建对象，工厂类 工厂对象 = new 工厂类() -->


    <!--1.静态工厂（不需要创建工厂本身）
        class:指定静态工厂的全类名
        factory-method:指定工厂方法
        constructor-arg:传参
     -->

    <bean id="airPlane01" class="com.mmz.factory.AirPlaneStaticFactory"
          factory-method="getAirPlane">
        <!--<constructor-arg>传参-->
        <constructor-arg name="caption" value="mmz"></constructor-arg>

    </bean>


    <!--2.实例工厂（需要创建工厂本身）-->
    <bean id="airPlaneInstanceFactory" class="com.mmz.factory.AirPlaneInstanceFactory">

    </bean>

    <!--factory-bean：指定当前对象创建使用的工厂对象
            1.配置实例工厂对象
            2.配置我们要创建的AirPlane使用哪个工厂实例
                  1）factory-bean 指定使用哪个工厂实例
                  2）factory-method 指定哪个工厂方法
    -->
    <bean id="airPlane02" class="com.mmz.AirPlane"
        factory-bean="airPlaneInstanceFactory"
        factory-method="getAirPlane">
        <constructor-arg name="caption" value="mmz"></constructor-arg>

    </bean>


    <!--(重要)3.FactoryBean(是Spring规定的一个接口)，只要是这个接口实现类，Spring都认为是一个工厂
            1.ioc容器启动的时候不会创建实例
            2.FactoryBean:获取时候才创建对象
            注意：这里跟isSingleton()这个是单多实例没有任何关系
    -->
    <bean id="myFactoryBeanImple" class="com.mmz.factory.MyFactoryBeanImple"></bean>




    <!--
    实验10：创建带有生命周期方法的bean
    实验11：测试bean的后置处理器
    实验12：引用外部属性文件（重要）
    实验13：基于xml的自动装配
    -->

    <!--实验10：创建带有生命周期方法的bean  生命周期：创建==》销毁
        单实例 bean： 容器启动的时候就已经创建好了，容器关闭也会销毁创建的bean
        多实例 bean： 获取时候才创建
        我们可以为bean自定义一些生命周期的方法；在创建和销毁的时候可以调用指定的方法
        -->
    <!--scope="prototype"-->
    <bean id="book02" class="com.mmz.Book"
        destroy-method="bookDestroy" init-method="bookInit"></bean>


    <!--实验11：测试bean的后置处理器: BeanPostProcessor
    Spring中有个接口，后置处理器，可以在 bean 的初始化前后调用方法-->
    <bean id="myBeanPostProcessor" class="com.mmz.MyBeanPostProcessor"></bean>




    <!--实验12：引用外部属性文件（重要）, 依赖context名称空间-->
    <!--数据库连接池作为单实例是最好的，一个项目就一个连接池，连接池里面管理很多连接。-->
    <!--通过Spring帮助创建连接池-->
    <!-- 引用外部属性文件的固定写法
        <context:property-placeholder location="classpath:xxxx.db.properties"/>
        "${xxx}"动态从配置文件中取出对应的值,注意引号中不能有空格
    -->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${user}"></property>
        <property name="password" value="${password}"></property>
        <property name="jdbcUrl" value="${jdbcurl}"></property>
        <property name="driverClass" value="${driverclass}"></property>
    </bean>



    <!--实验13：基于xml的自动装配(为自定义类型自动赋值)-->

    <bean id="car03" class="com.mmz.Car" p:price="2000000" p:name="BMW" p:color="red">
    </bean>


    <bean id="person16" class="com.mmz.Person" autowire="constructor">
        <!--这是手动赋值
        <property name="car" ref="car03"></property>
        -->
    </bean>


    <!--实验14：「SpEL测试」（看看）
        在SpEL中使用字面量，
        引用其他bean，
        引用其他bean的某个属性值，
        调用非静态方法，
        调用静态方法，
        使用运算符
    -->

    <bean id="person17" class="com.mmz.Person">
        <!--字面量：${}; spring中是#{}-->
        <property name="age" value="#{12*5}"></property>
        <!--引用其他bean的某个属性值-->
        <property name="lastName" value="#{book01.author}"></property>
        <!--引用其他bean-->
        <property name="car" value="#{car01}"></property>
        <!--调用静态方法-->
        <property name="email" value="#{T(java.util.UUID).randomUUID().toString()}"></property>


    </bean>


    <!--实验15：通过注解分别创建Dao,Service,Controller
        实验16：使用context：include-filter指定扫描包时要包含的类
        实验17：使用context：exclude-filter指定扫描包时不包含的类
    -->

    <!--实验15：通过注解分别创建Dao,Service,Controller.
        通过给bean上添加某些注解，可以快速将bean加入IOC容器中
        Spring四个注解
        @Controller:控制器（servlet）
        @Service:业务逻辑
        @Repository:给数据库层，持久化层，dao层
        @Component:给不属于以上几层的组件添加这个注解


        使用注解将组件快速加入到容器中需要几步：
        1.给要添加的组件上标4个注解中的任何一个
        2.告诉spring自动扫描添加注解的组件，依赖context名称空间
        3.导入AOP包
        context:component-scan:自动组件扫描
        base-package：
    <context:component-scan base-package="com.mmz"></context:component-scan>
    -->




    <!--实验16：使用context：include-filter指定扫描包时要包含的类-->
    <!--只扫描进入哪些组件，默认是全部扫描进来,一定要禁用掉默认的过滤规则-->
    <!--
    <context:component-scan base-package="com.mmz" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>
    </context:component-scan>
    -->


    <!--实验17：使用context：exclude-filter指定扫描包时不包含的类-->
    <!--扫描的时候可以排除一些不要的组件
        type="annotation"指定排除的规则，按照注解排除，标注了指定注解的组件不要
        expression="":注解的全类名-->
    <!--
    <context:component-scan base-package="com.mmz">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>
    -->

    <!--DII(依赖注入)(重要！！！)-->
    <!--实验18：使用@Autowired注解实现根据类型实现自动装配-->
    <context:component-scan base-package="com.mmz"></context:component-scan>
    <!--@Autowired原理：
            1.按照类型去容器中找到对应的组件：bookService = ioc.getBean(BookService.class)
               若找到一个直接赋值；没有找到报异；找到多个->按照成员变量变量名ID继续匹配->若没有匹配上（按照变量名匹配），
               可以使用@Qualifier：指定一个名为ID，让spring别使用变量名作为ID
    -->

    <!--@Autowired, @Resource, @Inject 都是自动装配
        @Autowired是spring自己的注解，强大
        @Resource是j2ee，Java自己的标准，扩展性强，若使用其他容器框架@Resource还是可以使用
        -->


























</beans>